// Generated by CoffeeScript 1.6.3
(function() {
    'use strict';
    var checkInView, checkInViewDebounced, checkInViewItems, debounce, getViewportWidth, offsetLeft, removeInViewItem;

    angular.module('angular-inview-horiz', []).directive('inViewContainerHoriz', function() {
        return {
            restrict: 'AC',
            controller: function($scope) {
                this.items = [];
                this.addItem = function(item) {
                    item.scope = $scope;
                    return this.items.push(item);
                };
                this.removeItem = function(item) {
                    var i;
                    return this.items = (function() {
                        var _i, _len, _ref, _results;
                        _ref = this.items;
                        _results = [];
                        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                            i = _ref[_i];
                            if (i !== item) {
                                _results.push(i);
                            }
                        }
                        return _results;
                    }).call(this);
                };
                return this;
            },
            link: function(scope, element, attrs, controller) {
                var check;
                check = debounce(function() {
                    return checkInView(controller.items);
                });
                element.bind('scroll', check);
                return scope.$on('$destroy', function() {
                    return element.unbind('scroll', check);
                });
            }
        };
    }).directive('inViewHoriz', function($parse) {
            return {
                restrict: 'A',
                require: '?^inViewContainerHoriz',
                link: function(scope, element, attrs, container) {
                    var inViewFunc, item;
                    if (!attrs.inViewHoriz) {
                        return;
                    }
                    inViewFunc = $parse(attrs.inViewHoriz);
                    item = {
                        element: element,
                        wasInView: false,
                        offset: 0,
                        scope: scope,
                        callback: function($inviewhoriz, $inviewparthoriz) {
                            var _this = this;
                            return this.scope.$apply(function() {
                                return inViewFunc(_this.scope, {
                                    '$inviewhoriz': $inviewhoriz,
                                    '$inviewparthoriz': $inviewparthoriz
                                });
                            });
                        }
                    };
                    if (container != null) {
                        container.addItem(item);
                    }
                    if (attrs.inViewOffset != null) {
                        attrs.$observe('inViewOffset', function(offset) {
                            item.offset = offset;
                            return checkInViewDebounced();
                        });
                    }
                    checkInViewItems.push(item);
                    checkInViewDebounced();
                    return scope.$on('$destroy', function() {
                        if (container != null) {
                            container.removeItem(item);
                        }
                        return removeInViewItem(item);
                    });
                }
            };
        });

    getViewportWidth = function() {
        var width, mode, _ref;
        width = window.innerWidth;
        if (width) {
            return width;
        }
        mode = document.compatMode;
        if (mode || !(typeof $ !== "undefined" && $ !== null ? (_ref = $.support) != null ? _ref.boxModel : void 0 : void 0)) {
            width = mode === 'CSS1Compat' ? document.documentElement.clientWidth : document.body.clientWidth;
        }
        return width;
    };

    offsetLeft = function(el) {
        var parent, result;
        result = 0;
        parent = el.parentElement;
        while (el) {
            result += el.offsetLeft;
            el = el.offsetParent;
        }
        while (parent) {
            if (parent.scrollLeft != null) {
                result -= parent.scrollLeft;
            }
            parent = parent.parentElement;
        }
        return result;
    };

    checkInViewItems = [];

    removeInViewItem = function(item) {
        var i;
        return checkInViewItems = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = checkInViewItems.length; _i < _len; _i++) {
                i = checkInViewItems[_i];
                if (i !== item) {
                    _results.push(i);
                }
            }
            return _results;
        })();
    };

    checkInView = function(items) {
        var elementRight, elementWidth, elementLeft, inViewHoriz, inViewWithOffset, inviewparthoriz, isRightVisible, isLeftVisible, item, viewportRight, viewportLeft, _i, _len, _results;
        viewportLeft = 0;
        viewportRight = viewportLeft + getViewportWidth();
        _results = [];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
            item = items[_i];
            elementLeft = offsetLeft(item.element[0]);
            elementWidth = item.element[0].offsetWidth;
            elementRight = elementLeft + elementWidth;
            inViewHoriz = elementLeft > viewportLeft && elementRight < viewportRight;
            isRightVisible = elementRight + item.offset > viewportLeft && elementLeft < viewportLeft;
            isLeftVisible = elementLeft - item.offset < viewportRight && elementRight > viewportRight;
            inViewWithOffset = inViewHoriz || isRightVisible || isLeftVisible || (elementLeft < viewportLeft && elementRight > viewportRight);
            if (inViewWithOffset) {
                inviewparthoriz = (isLeftVisible && 'left') || (isRightVisible && 'right') || 'both';
                if (!(item.wasInView && item.wasInView === inviewparthoriz)) {
                    item.wasInView = inviewparthoriz;
                    _results.push(item.callback(true, inviewparthoriz));
                } else {
                    _results.push(void 0);
                }
            } else if (!inViewHoriz && item.wasInView) {
                item.wasInView = false;
                _results.push(item.callback(false));
            } else {
                _results.push(void 0);
            }
        }
        return _results;
    };

    debounce = function(f, t) {
        var timer;
        timer = null;
        return function() {
            if (timer != null) {
                clearTimeout(timer);
            }
            return timer = setTimeout(f, t != null ? t : 100);
        };
    };

    checkInViewDebounced = debounce(function() {
        return checkInView(checkInViewItems);
    });

    angular.element(window).bind('checkInView click ready scroll resize', checkInViewDebounced);

}).call(this);

/*
 //@ sourceMappingURL=angular-inview.map
 */
